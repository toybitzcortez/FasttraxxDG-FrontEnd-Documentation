### YamlMime:ManagedReference
items:
- uid: FasttraxxDG.BaseLogic.MapperHelper
  commentId: T:FasttraxxDG.BaseLogic.MapperHelper
  id: MapperHelper
  parent: FasttraxxDG.BaseLogic
  children:
  - FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
  - FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(System.Collections.Generic.List{``0})
  langs:
  - csharp
  - vb
  name: MapperHelper
  nameWithType: MapperHelper
  fullName: FasttraxxDG.BaseLogic.MapperHelper
  type: Class
  source:
    id: MapperHelper
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseLogic\BL\MapperHelper.cs
    startLine: 5
  assemblies:
  - FasttraxxDG.BaseLogic
  namespace: FasttraxxDG.BaseLogic
  syntax:
    content: public static class MapperHelper
    content.vb: Public Module MapperHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
  commentId: M:FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
  id: MapTo``2(``0)
  isExtensionMethod: true
  parent: FasttraxxDG.BaseLogic.MapperHelper
  langs:
  - csharp
  - vb
  name: MapTo<TSource, TDest>(TSource)
  nameWithType: MapperHelper.MapTo<TSource, TDest>(TSource)
  fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo<TSource, TDest>(TSource)
  type: Method
  source:
    id: MapTo
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseLogic\BL\MapperHelper.cs
    startLine: 15
  assemblies:
  - FasttraxxDG.BaseLogic
  namespace: FasttraxxDG.BaseLogic
  summary: "\nthis method help to map <typeparam name=\"TSource\"></typeparam>\nto <typeparam name=\"TDest\"></typeparam> and return <typeparam name=\"TDest\"></typeparam>.\n"
  example: []
  syntax:
    content: public static TDest MapTo<TSource, TDest>(this TSource source)
    parameters:
    - id: source
      type: '{TSource}'
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    - id: TDest
      description: ''
    return:
      type: '{TDest}'
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MapTo(Of TSource, TDest)(source As TSource) As TDest
  overload: FasttraxxDG.BaseLogic.MapperHelper.MapTo*
  nameWithType.vb: MapperHelper.MapTo(Of TSource, TDest)(TSource)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FasttraxxDG.BaseLogic.MapperHelper.MapTo(Of TSource, TDest)(TSource)
  name.vb: MapTo(Of TSource, TDest)(TSource)
- uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(System.Collections.Generic.List{``0})
  commentId: M:FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(System.Collections.Generic.List{``0})
  id: MapTo``2(System.Collections.Generic.List{``0})
  isExtensionMethod: true
  parent: FasttraxxDG.BaseLogic.MapperHelper
  langs:
  - csharp
  - vb
  name: MapTo<TSource, TDest>(List<TSource>)
  nameWithType: MapperHelper.MapTo<TSource, TDest>(List<TSource>)
  fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo<TSource, TDest>(System.Collections.Generic.List<TSource>)
  type: Method
  source:
    id: MapTo
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseLogic\BL\MapperHelper.cs
    startLine: 30
  assemblies:
  - FasttraxxDG.BaseLogic
  namespace: FasttraxxDG.BaseLogic
  summary: "\nthis method help when you map a list of <typeparam name=\"TSource\"></typeparam>\nand return list of <typeparam name=\"TDest\"></typeparam>.\n"
  example: []
  syntax:
    content: public static List<TDest> MapTo<TSource, TDest>(this List<TSource> list)
    parameters:
    - id: list
      type: System.Collections.Generic.List{{TSource}}
      description: ''
    typeParameters:
    - id: TSource
      description: ''
    - id: TDest
      description: ''
    return:
      type: System.Collections.Generic.List{{TDest}}
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function MapTo(Of TSource, TDest)(list As List(Of TSource)) As List(Of TDest)
  overload: FasttraxxDG.BaseLogic.MapperHelper.MapTo*
  nameWithType.vb: MapperHelper.MapTo(Of TSource, TDest)(List(Of TSource))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: FasttraxxDG.BaseLogic.MapperHelper.MapTo(Of TSource, TDest)(System.Collections.Generic.List(Of TSource))
  name.vb: MapTo(Of TSource, TDest)(List(Of TSource))
references:
- uid: FasttraxxDG.BaseLogic
  commentId: N:FasttraxxDG.BaseLogic
  name: FasttraxxDG.BaseLogic
  nameWithType: FasttraxxDG.BaseLogic
  fullName: FasttraxxDG.BaseLogic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo*
  commentId: Overload:FasttraxxDG.BaseLogic.MapperHelper.MapTo
  name: MapTo
  nameWithType: MapperHelper.MapTo
  fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo
- uid: '{TSource}'
  commentId: '!:TSource'
  definition: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: '{TDest}'
  commentId: '!:TDest'
  definition: TDest
  name: TDest
  nameWithType: TDest
  fullName: TDest
- uid: TSource
  commentId: '!:TSource'
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: TDest
  commentId: '!:TDest'
  name: TDest
  nameWithType: TDest
  fullName: TDest
- uid: System.Collections.Generic.List{{TSource}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TSource>
  nameWithType: List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  nameWithType.vb: List(Of TSource)
  fullName.vb: System.Collections.Generic.List(Of TSource)
  name.vb: List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List{{TDest}}
  commentId: T:System.Collections.Generic.List{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TDest>
  nameWithType: List<TDest>
  fullName: System.Collections.Generic.List<TDest>
  nameWithType.vb: List(Of TDest)
  fullName.vb: System.Collections.Generic.List(Of TDest)
  name.vb: List(Of TDest)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TDest
    nameWithType: TDest
    fullName: TDest
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TDest
    nameWithType: TDest
    fullName: TDest
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
