### YamlMime:ManagedReference
items:
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  commentId: T:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  id: BaseDataAccess
  parent: FasttraxxDG.BaseService.DataAccess.Repository
  children:
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute``1(System.String,``0)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync``1(System.String,``0)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry``1(System.String,``0)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync``1(System.String,Dapper.DynamicParameters)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry``2(System.String,``1)
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable``1(System.Collections.Generic.List{``0})
  langs:
  - csharp
  - vb
  name: BaseDataAccess
  nameWithType: BaseDataAccess
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  type: Class
  source:
    id: BaseDataAccess
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 15
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  syntax:
    content: public class BaseDataAccess
    content.vb: Public Class BaseDataAccess
  inheritance:
  - System.Object
  derivedClasses:
  - FasttraxxDG.BaseService.AccountService
  - FasttraxxDG.BaseService.AddressService
  - FasttraxxDG.BaseService.AgentService
  - FasttraxxDG.BaseService.AnonymousService
  - FasttraxxDG.BaseService.AppUserService
  - FasttraxxDG.BaseService.BeneficiaryService
  - FasttraxxDG.BaseService.NotifService
  - FasttraxxDG.BaseService.RemitterService
  - FasttraxxDG.BaseService.TxnListService
  - FasttraxxDG.BaseService.TxnRemitService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.FasttraxxDG.BaseLogic.MapperHelper.MapTo``2
  - System.Object.FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
  - System.Object.FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString
  commentId: P:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString
  id: ConnectionString
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: ConnectionString
  nameWithType: BaseDataAccess.ConnectionString
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString
  type: Property
  source:
    id: ConnectionString
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 17
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  syntax:
    content: public string ConnectionString { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property ConnectionString As String
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList``2(System.String,``1)
  id: LoadList``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: LoadList<T, TU>(String, TU)
  nameWithType: BaseDataAccess.LoadList<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList<T, TU>(System.String, TU)
  type: Method
  source:
    id: LoadList
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 28
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nThis method fetches data and returns a list of <typeparam name=\"T\"></typeparam>.\n"
  example: []
  syntax:
    content: public List<T> LoadList<T, TU>(string storedProc, TU prm)
    parameters:
    - id: storedProc
      type: System.String
      description: name of stored procedure to execute
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Entity
    - id: TU
      description: dynamic parameter
    return:
      type: System.Collections.Generic.List{{T}}
      description: >
        list of <typeparam name="T"></typeparam>.
    content.vb: Public Function LoadList(Of T, TU)(storedProc As String, prm As TU) As List(Of T)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList*
  nameWithType.vb: BaseDataAccess.LoadList(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList(Of T, TU)(System.String, TU)
  name.vb: LoadList(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry``2(System.String,``1)
  id: LoadListQry``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: LoadListQry<T, TU>(String, TU)
  nameWithType: BaseDataAccess.LoadListQry<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry<T, TU>(System.String, TU)
  type: Method
  source:
    id: LoadListQry
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 42
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nThis method fetches data and returns a list of <typeparam name=\"T\"></typeparam>.\n"
  example: []
  syntax:
    content: public List<T> LoadListQry<T, TU>(string sql, TU prm)
    parameters:
    - id: sql
      type: System.String
      description: query to execute
    - id: prm
      type: '{TU}'
      description: <see cref="!:TU"></see>
    typeParameters:
    - id: T
      description: Entity Model
    - id: TU
      description: dynamic parameter
    return:
      type: System.Collections.Generic.List{{T}}
      description: list of <typeparam name="T"></typeparam>.
    content.vb: Public Function LoadListQry(Of T, TU)(sql As String, prm As TU) As List(Of T)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry*
  nameWithType.vb: BaseDataAccess.LoadListQry(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry(Of T, TU)(System.String, TU)
  name.vb: LoadListQry(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData``2(System.String,``1)
  id: GetData``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: GetData<T, TU>(String, TU)
  nameWithType: BaseDataAccess.GetData<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData<T, TU>(System.String, TU)
  type: Method
  source:
    id: GetData
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 57
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nThis method insert data and return entity of <typeparam name=\"T\"></typeparam>.\n"
  example: []
  syntax:
    content: public T GetData<T, TU>(string proc, TU prm)
    parameters:
    - id: proc
      type: System.String
      description: stored procedure to execute
    - id: prm
      type: '{TU}'
      description: <see cref="!:TU"></see>
    typeParameters:
    - id: T
      description: Entity Model
    - id: TU
      description: dynamic parameter
    return:
      type: '{T}'
      description: <typeparam name="T"></typeparam>
    content.vb: Public Function GetData(Of T, TU)(proc As String, prm As TU) As T
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData*
  nameWithType.vb: BaseDataAccess.GetData(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData(Of T, TU)(System.String, TU)
  name.vb: GetData(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry``2(System.String,``1)
  id: GetDataQry``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: GetDataQry<T, TU>(String, TU)
  nameWithType: BaseDataAccess.GetDataQry<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry<T, TU>(System.String, TU)
  type: Method
  source:
    id: GetDataQry
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 72
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nThis method get data and return entity of <typeparam name=\"T\"></typeparam>.\n"
  example: []
  syntax:
    content: public T GetDataQry<T, TU>(string sql, TU prm)
    parameters:
    - id: sql
      type: System.String
      description: query to execute
    - id: prm
      type: '{TU}'
      description: <see cref="!:TU"></see>
    typeParameters:
    - id: T
      description: Entity Model
    - id: TU
      description: dynamic parameter
    return:
      type: '{T}'
      description: <typeparam name="T"></typeparam>
    content.vb: Public Function GetDataQry(Of T, TU)(sql As String, prm As TU) As T
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry*
  nameWithType.vb: BaseDataAccess.GetDataQry(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry(Of T, TU)(System.String, TU)
  name.vb: GetDataQry(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase``2(System.String,``1)
  id: CrudBase``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: CrudBase<T, TU>(String, TU)
  nameWithType: BaseDataAccess.CrudBase<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase<T, TU>(System.String, TU)
  type: Method
  source:
    id: CrudBase
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 87
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nUpdate or Insert Data and Return It\n"
  example: []
  syntax:
    content: public T CrudBase<T, TU>(string proc, TU prm)
    parameters:
    - id: proc
      type: System.String
      description: Name of Stored Procedure
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Data Model
    - id: TU
      description: always dynamic
    return:
      type: '{T}'
      description: <typeparam name="T"></typeparam>
    content.vb: Public Function CrudBase(Of T, TU)(proc As String, prm As TU) As T
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase*
  nameWithType.vb: BaseDataAccess.CrudBase(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase(Of T, TU)(System.String, TU)
  name.vb: CrudBase(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry``2(System.String,``1)
  id: CrudBaseQry``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: CrudBaseQry<T, TU>(String, TU)
  nameWithType: BaseDataAccess.CrudBaseQry<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry<T, TU>(System.String, TU)
  type: Method
  source:
    id: CrudBaseQry
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 102
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nUpdate or Insert Data and Return It\n"
  example: []
  syntax:
    content: public T CrudBaseQry<T, TU>(string sql, TU prm)
    parameters:
    - id: sql
      type: System.String
      description: Hold for query string
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Data Model
    - id: TU
      description: always dynamic
    return:
      type: '{T}'
      description: T
    content.vb: Public Function CrudBaseQry(Of T, TU)(sql As String, prm As TU) As T
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry*
  nameWithType.vb: BaseDataAccess.CrudBaseQry(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry(Of T, TU)(System.String, TU)
  name.vb: CrudBaseQry(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute``1(System.String,``0)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute``1(System.String,``0)
  id: Execute``1(System.String,``0)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: Execute<TU>(String, TU)
  nameWithType: BaseDataAccess.Execute<TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute<TU>(System.String, TU)
  type: Method
  source:
    id: Execute
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 115
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nExecute Only\n"
  example: []
  syntax:
    content: public void Execute<TU>(string proc, TU prm)
    parameters:
    - id: proc
      type: System.String
      description: Name of StoredProcedure
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: TU
      description: always dynamic
    content.vb: Public Sub Execute(Of TU)(proc As String, prm As TU)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute*
  nameWithType.vb: BaseDataAccess.Execute(Of TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute(Of TU)(System.String, TU)
  name.vb: Execute(Of TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry``1(System.String,``0)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry``1(System.String,``0)
  id: ExecuteQry``1(System.String,``0)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: ExecuteQry<TU>(String, TU)
  nameWithType: BaseDataAccess.ExecuteQry<TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry<TU>(System.String, TU)
  type: Method
  source:
    id: ExecuteQry
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 127
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nExecute Only\n"
  example: []
  syntax:
    content: public void ExecuteQry<TU>(string sql, TU prm)
    parameters:
    - id: sql
      type: System.String
      description: Hold for query string
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: TU
      description: always dynamic
    content.vb: Public Sub ExecuteQry(Of TU)(sql As String, prm As TU)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry*
  nameWithType.vb: BaseDataAccess.ExecuteQry(Of TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry(Of TU)(System.String, TU)
  name.vb: ExecuteQry(Of TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync``2(System.String,``1)
  id: GetDataAsync``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: GetDataAsync<T, TU>(String, TU)
  nameWithType: BaseDataAccess.GetDataAsync<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync<T, TU>(System.String, TU)
  type: Method
  source:
    id: GetDataAsync
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 141
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nGet Data Model asynchronously\n"
  example: []
  syntax:
    content: public Task<T> GetDataAsync<T, TU>(string proc, TU prm)
    parameters:
    - id: proc
      type: System.String
      description: Name of Stored Procedure
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Data Model
    - id: TU
      description: always dynamic
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: T
    content.vb: Public Function GetDataAsync(Of T, TU)(proc As String, prm As TU) As Task(Of T)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync*
  nameWithType.vb: BaseDataAccess.GetDataAsync(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync(Of T, TU)(System.String, TU)
  name.vb: GetDataAsync(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync``2(System.String,``1)
  id: LoadListAsync``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: LoadListAsync<T, TU>(String, TU)
  nameWithType: BaseDataAccess.LoadListAsync<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync<T, TU>(System.String, TU)
  type: Method
  source:
    id: LoadListAsync
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 157
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nReturn List Asynchronously\n"
  example: []
  syntax:
    content: public Task<List<T>> LoadListAsync<T, TU>(string proc, TU prm)
    parameters:
    - id: proc
      type: System.String
      description: Name of StoredProcedure
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Data Model
    - id: TU
      description: alwasy dynamic
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
      description: >
        List<T></T>
    content.vb: Public Function LoadListAsync(Of T, TU)(proc As String, prm As TU) As Task(Of List(Of T))
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync*
  nameWithType.vb: BaseDataAccess.LoadListAsync(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync(Of T, TU)(System.String, TU)
  name.vb: LoadListAsync(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync``2(System.String,``1)
  id: CrudBaseAsync``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: CrudBaseAsync<T, TU>(String, TU)
  nameWithType: BaseDataAccess.CrudBaseAsync<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync<T, TU>(System.String, TU)
  type: Method
  source:
    id: CrudBaseAsync
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 172
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nUpdate and Insert Data and Return Asynchronously\n"
  example: []
  syntax:
    content: public Task<T> CrudBaseAsync<T, TU>(string proc, TU prm)
    parameters:
    - id: proc
      type: System.String
      description: ''
    - id: prm
      type: '{TU}'
      description: ''
    typeParameters:
    - id: T
      description: Data Model
    - id: TU
      description: always dynamic
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: T
    content.vb: Public Function CrudBaseAsync(Of T, TU)(proc As String, prm As TU) As Task(Of T)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync*
  nameWithType.vb: BaseDataAccess.CrudBaseAsync(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync(Of T, TU)(System.String, TU)
  name.vb: CrudBaseAsync(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync``1(System.String,``0)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync``1(System.String,``0)
  id: ExecuteAsync``1(System.String,``0)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TU>(String, TU)
  nameWithType: BaseDataAccess.ExecuteAsync<TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync<TU>(System.String, TU)
  type: Method
  source:
    id: ExecuteAsync
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 186
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nExecute Only Asynchronously\n"
  example: []
  syntax:
    content: public Task ExecuteAsync<TU>(string proc, TU prm)
    parameters:
    - id: proc
      type: System.String
      description: Name of StoredProcedure
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: TU
      description: dynamic
    return:
      type: System.Threading.Tasks.Task
      description: await async
    content.vb: Public Function ExecuteAsync(Of TU)(proc As String, prm As TU) As Task
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync*
  nameWithType.vb: BaseDataAccess.ExecuteAsync(Of TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync(Of TU)(System.String, TU)
  name.vb: ExecuteAsync(Of TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync``1(System.String,Dapper.DynamicParameters)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync``1(System.String,Dapper.DynamicParameters)
  id: ExecuteReturnScalarAsync``1(System.String,Dapper.DynamicParameters)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: ExecuteReturnScalarAsync<T>(String, DynamicParameters)
  nameWithType: BaseDataAccess.ExecuteReturnScalarAsync<T>(String, DynamicParameters)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync<T>(System.String, Dapper.DynamicParameters)
  type: Method
  source:
    id: ExecuteReturnScalarAsync
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 199
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nReturn Data Type ex: int, bool, string etc...asynchronously\n"
  example: []
  syntax:
    content: public Task<T> ExecuteReturnScalarAsync<T>(string storedProcedure, DynamicParameters prm)
    parameters:
    - id: storedProcedure
      type: System.String
      description: Name of StoredProcedure
    - id: prm
      type: Dapper.DynamicParameters
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Any Data Type
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: typeof(T)
    content.vb: Public Function ExecuteReturnScalarAsync(Of T)(storedProcedure As String, prm As DynamicParameters) As Task(Of T)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync*
  nameWithType.vb: BaseDataAccess.ExecuteReturnScalarAsync(Of T)(String, DynamicParameters)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync(Of T)(System.String, Dapper.DynamicParameters)
  name.vb: ExecuteReturnScalarAsync(Of T)(String, DynamicParameters)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType``2(System.String,``1)
  id: GetDataType``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: GetDataType<T, TU>(String, TU)
  nameWithType: BaseDataAccess.GetDataType<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType<T, TU>(System.String, TU)
  type: Method
  source:
    id: GetDataType
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 213
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nReturn Data Type ex: int, bool, string etc..\n"
  example: []
  syntax:
    content: public T GetDataType<T, TU>(string storedProcedure, TU prm)
    parameters:
    - id: storedProcedure
      type: System.String
      description: Name of StoredProcedure
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Any DataType
    - id: TU
      description: always dynamic
    return:
      type: '{T}'
      description: typeof(T)
    content.vb: Public Function GetDataType(Of T, TU)(storedProcedure As String, prm As TU) As T
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType*
  nameWithType.vb: BaseDataAccess.GetDataType(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType(Of T, TU)(System.String, TU)
  name.vb: GetDataType(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry``2(System.String,``1)
  id: GetDataTypeQry``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: GetDataTypeQry<T, TU>(String, TU)
  nameWithType: BaseDataAccess.GetDataTypeQry<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry<T, TU>(System.String, TU)
  type: Method
  source:
    id: GetDataTypeQry
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 226
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nReturn Data Type ex: int, bool, string etc..\n"
  example: []
  syntax:
    content: public T GetDataTypeQry<T, TU>(string sql, TU prm)
    parameters:
    - id: sql
      type: System.String
      description: Hold for Query string
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Any DataType
    - id: TU
      description: always dynamic
    return:
      type: '{T}'
      description: typeof(T)
    content.vb: Public Function GetDataTypeQry(Of T, TU)(sql As String, prm As TU) As T
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry*
  nameWithType.vb: BaseDataAccess.GetDataTypeQry(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry(Of T, TU)(System.String, TU)
  name.vb: GetDataTypeQry(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt``2(System.String,``1)
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt``2(System.String,``1)
  id: ExecuteUdt``2(System.String,``1)
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: ExecuteUdt<T, TU>(String, TU)
  nameWithType: BaseDataAccess.ExecuteUdt<T, TU>(String, TU)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt<T, TU>(System.String, TU)
  type: Method
  source:
    id: ExecuteUdt
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 239
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nInsert List of record into the database\n"
  example: []
  syntax:
    content: public void ExecuteUdt<T, TU>(string storedProcedure, TU prm)
    parameters:
    - id: storedProcedure
      type: System.String
      description: Name of StoredProcedure
    - id: prm
      type: '{TU}'
      description: DynamicParameter
    typeParameters:
    - id: T
      description: Hold for Data Model
    - id: TU
      description: always dynamic
    content.vb: Public Sub ExecuteUdt(Of T, TU)(storedProcedure As String, prm As TU)
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt*
  nameWithType.vb: BaseDataAccess.ExecuteUdt(Of T, TU)(String, TU)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt(Of T, TU)(System.String, TU)
  name.vb: ExecuteUdt(Of T, TU)(String, TU)
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable``1(System.Collections.Generic.List{``0})
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable``1(System.Collections.Generic.List{``0})
  id: ToDataTable``1(System.Collections.Generic.List{``0})
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: ToDataTable<T>(List<T>)
  nameWithType: BaseDataAccess.ToDataTable<T>(List<T>)
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable<T>(System.Collections.Generic.List<T>)
  type: Method
  source:
    id: ToDataTable
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 251
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nConvert List to DataTable\n"
  example: []
  syntax:
    content: public DataTable ToDataTable<T>(List<T> list)
    parameters:
    - id: list
      type: System.Collections.Generic.List{{T}}
      description: Hold for List
    typeParameters:
    - id: T
      description: Hold for DataModel
    return:
      type: System.Data.DataTable
      description: DataTable
    content.vb: Public Function ToDataTable(Of T)(list As List(Of T)) As DataTable
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable*
  nameWithType.vb: BaseDataAccess.ToDataTable(Of T)(List(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable(Of T)(System.Collections.Generic.List(Of T))
  name.vb: ToDataTable(Of T)(List(Of T))
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection
  commentId: M:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection
  id: TestConnection
  parent: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess
  langs:
  - csharp
  - vb
  name: TestConnection()
  nameWithType: BaseDataAccess.TestConnection()
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection()
  type: Method
  source:
    id: TestConnection
    path: C:\Project\FasttraxxDG\FasttraxxDG-FrontEnd\Code\FasttraxxDG.BaseService\BaseDataAccess.cs
    startLine: 274
  assemblies:
  - FasttraxxDG.BaseService
  namespace: FasttraxxDG.BaseService.DataAccess.Repository
  summary: "\nTest you Connection\n"
  example: []
  syntax:
    content: public bool TestConnection()
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TestConnection As Boolean
  overload: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: FasttraxxDG.BaseService.DataAccess.Repository
  commentId: N:FasttraxxDG.BaseService.DataAccess.Repository
  name: FasttraxxDG.BaseService.DataAccess.Repository
  nameWithType: FasttraxxDG.BaseService.DataAccess.Repository
  fullName: FasttraxxDG.BaseService.DataAccess.Repository
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.FasttraxxDG.BaseLogic.MapperHelper.MapTo``2
  commentId: M:FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
  parent: FasttraxxDG.BaseLogic.MapperHelper
  definition: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
  name: MapTo<BaseDataAccess, TDest>()
  nameWithType: MapperHelper.MapTo<BaseDataAccess, TDest>()
  fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo<FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess, TDest>()
  nameWithType.vb: MapperHelper.MapTo(Of BaseDataAccess, TDest)()
  fullName.vb: FasttraxxDG.BaseLogic.MapperHelper.MapTo(Of FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess, TDest)()
  name.vb: MapTo(Of BaseDataAccess, TDest)()
  spec.csharp:
  - uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2
    name: MapTo<BaseDataAccess, TDest>
    nameWithType: MapperHelper.MapTo<BaseDataAccess, TDest>
    fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo<FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess, TDest>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2
    name: MapTo(Of BaseDataAccess, TDest)
    nameWithType: MapperHelper.MapTo(Of BaseDataAccess, TDest)
    fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo(Of FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess, TDest)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
  commentId: M:FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow(System.Object)
  parent: FasttraxxDG.FrontEndUI.Helpers.AppSettings
  definition: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow(System.Object)
  name: RightDrawerShow()
  nameWithType: AppSettings.RightDrawerShow()
  fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow()
  spec.csharp:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
    name: RightDrawerShow
    nameWithType: AppSettings.RightDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
    name: RightDrawerShow
    nameWithType: AppSettings.RightDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
  commentId: M:FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow(System.Object)
  parent: FasttraxxDG.FrontEndUI.Helpers.AppSettings
  definition: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow(System.Object)
  name: LeftDrawerShow()
  nameWithType: AppSettings.LeftDrawerShow()
  fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow()
  spec.csharp:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
    name: LeftDrawerShow
    nameWithType: AppSettings.LeftDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
    name: LeftDrawerShow
    nameWithType: AppSettings.LeftDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
  commentId: M:FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
  name: MapTo<TSource, TDest>(TSource)
  nameWithType: MapperHelper.MapTo<TSource, TDest>(TSource)
  fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo<TSource, TDest>(TSource)
  nameWithType.vb: MapperHelper.MapTo(Of TSource, TDest)(TSource)
  fullName.vb: FasttraxxDG.BaseLogic.MapperHelper.MapTo(Of TSource, TDest)(TSource)
  name.vb: MapTo(Of TSource, TDest)(TSource)
  spec.csharp:
  - uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
    name: MapTo<TSource, TDest>
    nameWithType: MapperHelper.MapTo<TSource, TDest>
    fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo<TSource, TDest>
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FasttraxxDG.BaseLogic.MapperHelper.MapTo``2(``0)
    name: MapTo(Of TSource, TDest)
    nameWithType: MapperHelper.MapTo(Of TSource, TDest)
    fullName: FasttraxxDG.BaseLogic.MapperHelper.MapTo(Of TSource, TDest)
  - name: (
    nameWithType: (
    fullName: (
  - name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: )
    nameWithType: )
    fullName: )
- uid: FasttraxxDG.BaseLogic.MapperHelper
  commentId: T:FasttraxxDG.BaseLogic.MapperHelper
  parent: FasttraxxDG.BaseLogic
  name: MapperHelper
  nameWithType: MapperHelper
  fullName: FasttraxxDG.BaseLogic.MapperHelper
- uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow(System.Object)
  commentId: M:FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow(System.Object)
  isExternal: true
  name: RightDrawerShow(Object)
  nameWithType: AppSettings.RightDrawerShow(Object)
  fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow(System.Object)
  spec.csharp:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow(System.Object)
    name: RightDrawerShow
    nameWithType: AppSettings.RightDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow(System.Object)
    name: RightDrawerShow
    nameWithType: AppSettings.RightDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.RightDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings
  commentId: T:FasttraxxDG.FrontEndUI.Helpers.AppSettings
  parent: FasttraxxDG.FrontEndUI.Helpers
  name: AppSettings
  nameWithType: AppSettings
  fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings
- uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow(System.Object)
  commentId: M:FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow(System.Object)
  isExternal: true
  name: LeftDrawerShow(Object)
  nameWithType: AppSettings.LeftDrawerShow(Object)
  fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow(System.Object)
  spec.csharp:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow(System.Object)
    name: LeftDrawerShow
    nameWithType: AppSettings.LeftDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow(System.Object)
    name: LeftDrawerShow
    nameWithType: AppSettings.LeftDrawerShow
    fullName: FasttraxxDG.FrontEndUI.Helpers.AppSettings.LeftDrawerShow
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FasttraxxDG.BaseLogic
  commentId: N:FasttraxxDG.BaseLogic
  name: FasttraxxDG.BaseLogic
  nameWithType: FasttraxxDG.BaseLogic
  fullName: FasttraxxDG.BaseLogic
- uid: FasttraxxDG.FrontEndUI.Helpers
  commentId: N:FasttraxxDG.FrontEndUI.Helpers
  name: FasttraxxDG.FrontEndUI.Helpers
  nameWithType: FasttraxxDG.FrontEndUI.Helpers
  fullName: FasttraxxDG.FrontEndUI.Helpers
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString
  name: ConnectionString
  nameWithType: BaseDataAccess.ConnectionString
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ConnectionString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList
  name: LoadList
  nameWithType: BaseDataAccess.LoadList
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadList
- uid: '{TU}'
  commentId: '!:TU'
  definition: TU
  name: TU
  nameWithType: TU
  fullName: TU
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TU
  name: TU
  nameWithType: TU
  fullName: TU
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry
  name: LoadListQry
  nameWithType: BaseDataAccess.LoadListQry
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListQry
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData
  name: GetData
  nameWithType: BaseDataAccess.GetData
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetData
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry
  name: GetDataQry
  nameWithType: BaseDataAccess.GetDataQry
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataQry
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase
  name: CrudBase
  nameWithType: BaseDataAccess.CrudBase
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBase
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry
  name: CrudBaseQry
  nameWithType: BaseDataAccess.CrudBaseQry
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseQry
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute
  name: Execute
  nameWithType: BaseDataAccess.Execute
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.Execute
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry
  name: ExecuteQry
  nameWithType: BaseDataAccess.ExecuteQry
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteQry
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync
  name: GetDataAsync
  nameWithType: BaseDataAccess.GetDataAsync
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync
  name: LoadListAsync
  nameWithType: BaseDataAccess.LoadListAsync
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.LoadListAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{{T}}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync
  name: CrudBaseAsync
  nameWithType: BaseDataAccess.CrudBaseAsync
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.CrudBaseAsync
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync
  name: ExecuteAsync
  nameWithType: BaseDataAccess.ExecuteAsync
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync
  name: ExecuteReturnScalarAsync
  nameWithType: BaseDataAccess.ExecuteReturnScalarAsync
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteReturnScalarAsync
- uid: Dapper.DynamicParameters
  commentId: T:Dapper.DynamicParameters
  parent: Dapper
  isExternal: true
  name: DynamicParameters
  nameWithType: DynamicParameters
  fullName: Dapper.DynamicParameters
- uid: Dapper
  commentId: N:Dapper
  isExternal: true
  name: Dapper
  nameWithType: Dapper
  fullName: Dapper
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType
  name: GetDataType
  nameWithType: BaseDataAccess.GetDataType
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataType
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry
  name: GetDataTypeQry
  nameWithType: BaseDataAccess.GetDataTypeQry
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.GetDataTypeQry
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt
  name: ExecuteUdt
  nameWithType: BaseDataAccess.ExecuteUdt
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ExecuteUdt
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable
  name: ToDataTable
  nameWithType: BaseDataAccess.ToDataTable
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.ToDataTable
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: true
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data
  commentId: N:System.Data
  isExternal: true
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection*
  commentId: Overload:FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection
  name: TestConnection
  nameWithType: BaseDataAccess.TestConnection
  fullName: FasttraxxDG.BaseService.DataAccess.Repository.BaseDataAccess.TestConnection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
